; organisation de la mémoire graphique:
; XXX XXX XXY YYY YYY -> valeur
; 

#define LOG_TAILLE_X 8 ; 256
#define LOG_TAILLE_Y 7 ; 128
#define LOG_LONGUEUR 2 ; longueur de la queue
#define TAILLE_Y (1<<LOG_TAILLE_Y) ;hauteur de TAILLE_Y
#define TAILLE_X (1<<LOG_TAILLE_X) ;largeur de TAILLE_X
#define LONGUEUR (1<<LOG_LONGUEUR)
#define NB_JOUEURS 1 ;nb_joueurs
#define TAILLE_WORD 3 ;nombre de bit dans un mot machine
#define MUR (NB_JOUEURS+1)

#define WORD_PAR_X (LOG_TAILLE_X/TAILLE_WORD)+1
#define WORD_PAR_Y (LOG_TAILLE_Y/TAILLE_WORD)+1
; nombre de mots nécessaires pour coder une abscisse ou une ordonnnée
; par exemple, si on a des mots de 3 bits, et qu'il y a 2^7 = 128 cases en largeur (ou hauteur), il faut 7/3+1=3 mots pour coder l'abscisse (ou l'ordonnée)

; "table" a besoin de 2 valeurs différentes pour juste jouer (vide / plein), mieux vaut NB_JOUEURS+2 valeurs pour l'affichage graphique (1 couleur pour vide, 1 couleur pour plein, 1 couleur par joueur).
; du coup, il faudrait au moins 3 bits pour stocker chaque valeur

; il y a trois indices: un pour X, un pour Y, un pour le mot désiré
; l'organisation est faite ainsi: XXXYYY (avec "LOG_TAILLE_X" fois X, "LOG_TAILLE_Y" fois Y)
; "table" doit être aligné sur une puissance de 2 plus grande que LOG_TAILLE_X + LOG_TAILLE_Y + 3

table dw (1 << (LOG_TAILLE_X+LOG_TAILLE_Y+3)) dup (?)

; joueurs
; il y a 4 indices dans ce tableau.
; J: l'indice du joueur, entre 0 et NB_JOUEURS - 1 (max 4 joueurs). Tient sur 2 bits.
; Q: l'indice de la longueur de la queue, entre 0 et LONGUEUR-1. Tient sur LOG_LONGUEUR bits.
; W: l'indice à l'intérieur de l'abscisse (ou de l'ordonnée) elle-même, entre 0 et NB_WORD_POUR_POSITION-1. Tient sur 3 bits
; l'organisation est faite ainsi: JJ   QQQ   QQQ   WWW
;                                  3     2     1     0

; pour indices: 100 000 0JJ WWW

jnz reg, adr
peut s'écrire en assembleur sans macro:
cmp reg : met à jour les flags
jnz adr : consulte les flags pour sauter

dec reg
peut s'écrire en assembleur sans macro:
neg reg
inc reg
neg reg
qui peut encore s'écrire:
not reg
inc reg
inc reg
not reg
inc reg

jmp adr
peut s'écrire en assembleur sans macro:
cmp reg
jnz adr
not reg
cmp reg
not red
jnz adr

jne reg1, reg2, adr
peut s'écrire en assembleur sans macro:
mov ACC, reg1
xor ACC, reg2
cmp ACC
jnz adr

or ACC, imm
peut s'écrire en assembleur sans macro:
not ACC
and ACC, ~imm
not ACC

mov reg, imm
peut s'écrire en assembleur sans macro:
mov ACC, imm
mov reg, ACC

mov [index], reg1:reg2
qui envoie un double-mot (reg1 poids fort, reg2 poids faible) (little endian)
peut s'écrire en assembleur sans macro:
mov [index], reg2
inc index
mov [index], reg1
dec index

mov [index], reg1:reg2:reg3
qui envoie un triple-mot (reg1 poids fort, reg3 poids faible) (little endian)
peut s'écrire en assembleur sans macro:
mov [index], reg3
inc index
mov [index], reg2
inc index
mov [index], reg1
dec index
dec index

mov reg1:reg2:reg3, [index]
qui lit un triple-mot (reg1 poids fort, reg3 poids faible) (little endian)
peut s'écrire en assembleur sans macro:
mov reg3, [index]
inc index
mov reg2, [index]
inc index
mov reg1, [index]
dec index
dec index

Instructions nécessaires:
//mov ACC, imm
mov reg, imm
mov reg1, reg2
movg [index], reg ; mov graphique: envoie la valeur au processeur graphique
movg reg, [index] ;
movd [index], reg ; mov data
movd reg, [index] ; mov data
inc reg
dec reg
cinc reg ; conditional incrementation
cdec reg ; conditional decrementation
cxor reg // effectue "xor reg, 1" si overflow précédent (inverse le bit de poids faible)
cmp reg
jnz adr
jnz reg, adr ? (a priori faisable)
jmp adr
rnd reg1 ; valeur aléatoire dans reg1 (convertisseur analogique numérique relié à une antenne dont on prend les bits de poids faible)

composition instruction:
code instruction (4)
imm ou reg ou adr (4)
imm ou reg ou adr (4)
imm ou reg ou adr (4)
-> en codant une instruction sur 2 octets, on peut facilement avoir quelque chose de pas mal

Code instruction: (8 bits)
memoire graphique en écriture et met index sur le bus d'adresse
memoire graphique en lecture et met index sur le bus d'adresse
memoire data en écriture
memoire data en lecture
program counter en écriture
annule si overflow précédent (désactive l'écriture)
commande ALU 1, dirige vers INC/DEC ou NOT
commande ALU 2, transforme le INC en DEC (DEC REG = ADD REG, (MAX-1))

Registre 1, en écriture (4 bits)
Registre 2, en lecture pour l'instruction et écriture pour la valeur immédiate (4 bits)
La valeur immédiate (3 bits)
Adresse poids fort (5 bits)
Adresse poids faible (8 bits)

mov reg1 reg2 imm : met imm dans ACC, puis reg2 dans reg1
c'est-à-dire que:
mov reg imm est en fait mov reg ACC imm
mov reg1, reg2 est en fait mov reg1 reg2 0
movg [index], reg1 est en fait movg ACC, reg1, 0 (avec l'écriture en mémoire graphique activée)
le 1er registre met à jour les flags, toujours (après sa modification)

Il faut: 
- un bus de commande de 8 bits pour le code d'instruction
- deux bus d'adresses (un d'écriture, un de lecture) de 3 bits pour les registres
- un bus de donnée de 3 bits
- un bus d'adresse de 15bits pour la mémoire graphique
- un bus d'adresse de 12bits pour la mémoire vive
- un bus de données de 8bits pour la mémoire programme

Exemple de l'exécution d'une instruction:
lecture du premier octet dans la mémoire programme sur un bus 8 bits
on met en écriture un registre 8 bits qui contiendra le code d'instruction
incrémentation de l'IP
lecture du 2e octet, écriture, incrémentation de l'IP...
lecture du 3e octet, écriture, incrémentation de l'IP...
lecture du 4e octet, écriture, incrémentation de l'IP

on met la valeur immédiate dans le bus de donnée, on active l'écriture de ACC
on met sur le bus de commande les 8 bits de l'instruction
on met sur le bus d'adresse de lecture le registre 2, ce qui effectue les calculs et stock les résultats dans le registre tampon de l'ALU
on met sur le bus d'adresse d'écriture le registre 1, on met sur le bus d'adresse en lecture le registre tampon de l'ALU
