Quelques infos diverses sur le processeur.

Bus
===

- un bus de commande de 8 bits pour le code d'instruction
- deux bus d'adresses (un d'écriture, un de lecture) de 5 bits pour les registres
- un bus de données de 3 bits en entrée d'ALU
- un bus de données de 3 bits en sortie d'ALU
- un bus de données de 3 bits qui relie l'instruction au registre ACC (explication plus bas)
- un bus d'adresse de 15bits pour la mémoire graphique
- un bus d'adresse de 12bits pour la mémoire vive
- quatre bus de données de 8bits pour la mémoire programme (un par mémoire programme)


Décodage d'une instruction
==========================

Une instruction est structurée en différentes parties

instruction reg1 reg2 immediate adresse

Avec instruction un code d'instruction sur 8 bits
reg1 le numéro d'un registre sur 4 bits	 (on n'a besoin que de 10 registres et 2^4 = 16)
reg2 le numéro d'un registre sur 4 bits  (on n'a besoin que de 10 registres et 2^4 = 16)
immediate une valeur immédiate sur 3 bits
adresse une adresse en mémoire programme sur 13 bits

Pour chaque instructions, ces opérations sont faites:
- on met immediate dans le registre ACC
- on utilise le code d'instruction pour préparer l'alu et les bus
- on met reg1 dans l'alu, on récupère son contenu qu'on met dans reg2
- on effectue un saut ABSOLU à "adresse" si le flag "zero" est actif

A mon avis, le plus simple est de lire 4 octets d'un coup et de faire ces opérations parallèlement.
Pour faire ces opérations manuellement, il faut que chaque bus soit utilisé au plus pour une de ces opérations. Cela signifie que la première étape (ACC <- immediate) ne peut pas utiliser le bus d'écriture habituel des registres.
Côté mémoire programme, il y a deux moyens de faire cette parallélisation. Soit avec une mémoire et un petit circuit qui lit séquentiellement les quatre octets, soit quatre mémoires afin de lire parallèlement tout ça.
Je suggère la seconde solution, qui permettra surtout d'avoir un schéma simple. Par exemple, dans la mémoire programme 1, il y aura que des codes d'instructions. Dans la mémoire 2, reg1 et immediate. Etc.
Ainsi, une instruction complète sera codée à une certaine adresse A, et se trouvera en partie sur la mémoire programme 1 à l'adresse A, en partie sur la mémoire programme 2 à l'adresse A, etc.
Ceci permet aussi de simplifier l'incrémentation du pointeur d'instruction, qui ne montera à chaque fois que d'une unité et non de quatre.


Code instruction
===============

A chaque ligne correspond un bit du code d'instruction.
Il s'agit d'un RISC: des combinaisons sont impossibles.
Le décodage est facile, car il suffit de brancher chaque bit au bon câble, il n'y a pas de calcul à faire.

memoire graphique en écriture et met index sur le bus d'adresse
memoire graphique en lecture et met index sur le bus d'adresse
memoire data en écriture
memoire data en lecture
(program counter en écriture) (inutile?)
ignore overflow précédent (à donner à l'ALU)
commande ALU 1, dirige vers INC/DEC ou NOT (1: NOT, 0: INC/DEC)
commande ALU 2, transforme le INC en DEC. (0: DEC, 1: INC)

De plus, pour faire CMP, il faut appeler l'ALU avec ignore overflow = 1, alu1 = 1, alu2 = 0 ou 1.


Ce qu'il faut dans le processeur
================================

Il faut:
- une ALU (faite)
- un décodeur d'instruction (cf plus haut, avec 4 mémoires, ce décodeur n'aura peut-être même pas de portes logiques, que des fils)
- le registre IP (instruction pointer), qui est un registre particulier qui s'incrémente à chaque instruction. C'est un registre 8 bits.
- l'horloge
- des registres
- des bus
- une interface avec une "carte graphique" (comprendre une arduino)
