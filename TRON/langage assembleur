Voici la syntaxe du langage assembleur sans macro.
Il pourra après être enrichi de macros.

REGISTRES
=========
32 registres, r0 jusqu'à r31
index0 est un synonyme pour r0
index1 est un synonyme pour r1
index2 est un synonyme pour r2
index3 est un synonyme pour r3
index4 est un synonyme pour r4
inJ1 est un synonyme pour r5
inJ2 est un synonyme pour r6
inJ3 est un synonyme pour r7
inJ4 est un synonyme pour r8
ACC est un synonyme pour r9
RND est un synonyme pour r10

VALEURS IMMEDIATES ET ADRESSES
==============================

Une valeur immédiate est un nombre entier positif compris entre 0 et 7 (inclus) précédé d'un #.
Par exemple: #3

Une adresse est un nombre entier positif compris entre 0 et ...
Par exemple: 220

MNEMONIQUES
===========

Les mnémoniques sont:
mov, movd, movg, inc, dec, cinc, cdec, cxor, cmp, jnz, jmp, rnd

Les opérations licites sont:
mov REG, IMM
mov REG1, REG2
movg [index], REG
movg REG [index]
movd [index], REG
movd REG, [index]
inc REG
dec REG
cinc REG
cdec REG
cxor REG
flg REG
jnz ADR
jmp ADR
rnd REG

où IMM est une valeur immédiate quelconque, REG, REG1, et REG2 des registres parmi la liste des registres (cf supra), ADR est une adresse quelconque.
[index] fait partie de la syntaxe et ne peut être modifié.

movd peut accepter que REG soit sur plus que 3 bits, la syntaxe est alors: REG1.REG2.REG3 etc...

MACRO
=====

Macro proposée:
jnz REG, ADR		cmp REG
					jnz ADR

(on pourrait en imaginer d'autres...)

DEFINE
======

Il serait bien de pouvoir avoir des define (par exemple le nombre de joueurs, des paramètres de générations aléatoires, etc.)
Syntaxe:
valeur1 EQU valeur2
Ce serait alors un remplacement syntaxique de "valeur1" par "valeur2"
Par exemple, si on écrit
REGISTRE_BOUCLE EQU r0
mov REGISTRE_BOUCLE, #3

Cela se transformerait en:
mov r0, #3

Enfin, le mieux serait de pouvoir faire des define qui fasse référence à d'autres define. Comme:
NB_JOUEURS EQU 2
VALEUR_MUR EQU (NB_JOUEURS+1)

CALCULS SIMPLES
===============

Il faudrait qu'on puisse écrire:
mov r0, 2*3-2
Par calcul simple, on comprend l'utilisations des opérations +, *, -, / (division euclidienne) ainsi que l'usage des parenthèses.

LABELS
======

Il serait bien de pouvoir utiliser des label. La syntaxe est:
L_MOT:
pour créer un label, et
jmp L_MOT
pour l'utiliser.
Un label commence nécessairemment par L_, ne contient pas d'espace ou de symbole (_ est autorisé)o. Par exemple:
L_BOUCLE
L_init
L_Init_Boucle

L'adresse mémoire commence à 0 (à la première instruction). L'adresse mémoire s'incrémente à chaque ligne contenant une instruction.

Il sera probablement nécessaire de faire plusieurs passes dans l'assemblage, afin de pouvoir faire un saut à un label qui se trouve plus loin dans le code.

COMMENTAIRES
============

Les commentaires sont mono-lignes et commencent pas ';'
Par exemple:
mov r3, #4 ; met dans le quatrième registre la valeur 4
